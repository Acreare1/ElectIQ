// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model for authentication and profile
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  firstName  String
  lastName   String
  matricNo   String   @unique
  role       UserRole @default(STUDENT)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  vote       Vote[]
}

// Enum for user roles
enum UserRole {
  STUDENT
  ADMIN
}

// Election model to track specific election instances
model Election {
  id           Int        @id @default(autoincrement())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime
  isActive     Boolean    @default(false)
  isClosed     Boolean    @default(false)
  categories   Category[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

// Candidate model representing election candidates
model Candidate {
  id         Int      @id @default(autoincrement())
  name       String
  bio        String?
  image      String?
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  votes      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Vote       Vote[]
}

// Category model for election positions
model Category {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  electionId  Int
  election    Election    @relation(fields: [electionId], references: [id])
  candidates  Candidate[]
  totalVotes  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Vote model to track individual votes
model Vote {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  createdAt   DateTime  @default(now())

  @@unique([userId, candidateId])
}